## este codigo tiene mal las asignaciones de reles, pero funciona bien los tiempos


esphome:
  name: kc868-a6-a
  friendly_name: KC868-A6 Controller-A

esp32:
  board: esp32dev
  framework:
    type: arduino

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

# Time components
time:
  - platform: homeassistant
    id: homeassistant_time

# Global variables for time tracking
globals:
  - id: last_activation_term_salon
    type: int
    restore_value: yes
    initial_value: '0'
  - id: last_activation_term_julia
    type: int
    restore_value: yes
    initial_value: '0'
  - id: last_activation_term_sergio
    type: int
    restore_value: yes
    initial_value: '0'
  - id: last_activation_term_principal
    type: int
    restore_value: yes
    initial_value: '0'
  - id: last_activation_valve_salon
    type: int
    restore_value: yes
    initial_value: '0'
  - id: last_activation_valve_cocina
    type: int
    restore_value: yes
    initial_value: '0'
  - id: last_activation_valve_bano
    type: int
    restore_value: yes
    initial_value: '0'
  - id: last_activation_valve_julia
    type: int
    restore_value: yes
    initial_value: '0'
  - id: last_activation_valve_sergio
    type: int
    restore_value: yes
    initial_value: '0'
  - id: last_activation_valve_principal
    type: int
    restore_value: yes
    initial_value: '0'

text_sensor:
  # Thermostats last activation
  - platform: template
    name: "Term. Salón - Última activación"
    id: time_since_term_salon
    icon: "mdi:timer-outline"
    update_interval: 1s
    lambda: |-
      int seconds = id(homeassistant_time).now().timestamp - id(last_activation_term_salon);
      int days = seconds / 86400;
      int hours = (seconds % 86400) / 3600;
      int minutes = (seconds % 3600) / 60;
      int secs = seconds % 60;
      char buffer[32];
      sprintf(buffer, "%dd %dh %dm %ds", days, hours, minutes, secs);
      return std::string(buffer);

  - platform: template
    name: "Term. Hab. Julia - Última activación"
    id: time_since_term_julia
    icon: "mdi:timer-outline"
    update_interval: 1s
    lambda: |-
      int seconds = id(homeassistant_time).now().timestamp - id(last_activation_term_julia);
      int days = seconds / 86400;
      int hours = (seconds % 86400) / 3600;
      int minutes = (seconds % 3600) / 60;
      int secs = seconds % 60;
      char buffer[32];
      sprintf(buffer, "%dd %dh %dm %ds", days, hours, minutes, secs);
      return std::string(buffer);

  - platform: template
    name: "Term. Hab. Sergio - Última activación"
    id: time_since_term_sergio
    icon: "mdi:timer-outline"
    update_interval: 1s
    lambda: |-
      int seconds = id(homeassistant_time).now().timestamp - id(last_activation_term_sergio);
      int days = seconds / 86400;
      int hours = (seconds % 86400) / 3600;
      int minutes = (seconds % 3600) / 60;
      int secs = seconds % 60;
      char buffer[32];
      sprintf(buffer, "%dd %dh %dm %ds", days, hours, minutes, secs);
      return std::string(buffer);

  - platform: template
    name: "Term. Hab. Principal - Última activación"
    id: time_since_term_principal
    icon: "mdi:timer-outline"
    update_interval: 1s
    lambda: |-
      int seconds = id(homeassistant_time).now().timestamp - id(last_activation_term_principal);
      int days = seconds / 86400;
      int hours = (seconds % 86400) / 3600;
      int minutes = (seconds % 3600) / 60;
      int secs = seconds % 60;
      char buffer[32];
      sprintf(buffer, "%dd %dh %dm %ds", days, hours, minutes, secs);
      return std::string(buffer);

  # Valves last activation
  - platform: template
    name: "Válv. Salón - Última activación"
    id: time_since_valve_salon
    icon: "mdi:timer-outline"
    update_interval: 1s
    lambda: |-
      int seconds = id(homeassistant_time).now().timestamp - id(last_activation_valve_salon);
      int days = seconds / 86400;
      int hours = (seconds % 86400) / 3600;
      int minutes = (seconds % 3600) / 60;
      int secs = seconds % 60;
      char buffer[32];
      sprintf(buffer, "%dd %dh %dm %ds", days, hours, minutes, secs);
      return std::string(buffer);

  - platform: template
    name: "Válv. Cocina - Última activación"
    id: time_since_valve_cocina
    icon: "mdi:timer-outline"
    update_interval: 1s
    lambda: |-
      int seconds = id(homeassistant_time).now().timestamp - id(last_activation_valve_cocina);
      int days = seconds / 86400;
      int hours = (seconds % 86400) / 3600;
      int minutes = (seconds % 3600) / 60;
      int secs = seconds % 60;
      char buffer[32];
      sprintf(buffer, "%dd %dh %dm %ds", days, hours, minutes, secs);
      return std::string(buffer);

  - platform: template
    name: "Válv. Baño Peq. - Última activación"
    id: time_since_valve_bano
    icon: "mdi:timer-outline"
    update_interval: 1s
    lambda: |-
      int seconds = id(homeassistant_time).now().timestamp - id(last_activation_valve_bano);
      int days = seconds / 86400;
      int hours = (seconds % 86400) / 3600;
      int minutes = (seconds % 3600) / 60;
      int secs = seconds % 60;
      char buffer[32];
      sprintf(buffer, "%dd %dh %dm %ds", days, hours, minutes, secs);
      return std::string(buffer);

  - platform: template
    name: "Válv. Hab. Julia - Última activación"
    id: time_since_valve_julia
    icon: "mdi:timer-outline"
    update_interval: 1s
    lambda: |-
      int seconds = id(homeassistant_time).now().timestamp - id(last_activation_valve_julia);
      int days = seconds / 86400;
      int hours = (seconds % 86400) / 3600;
      int minutes = (seconds % 3600) / 60;
      int secs = seconds % 60;
      char buffer[32];
      sprintf(buffer, "%dd %dh %dm %ds", days, hours, minutes, secs);
      return std::string(buffer);

  - platform: template
    name: "Válv. Hab. Sergio - Última activación"
    id: time_since_valve_sergio
    icon: "mdi:timer-outline"
    update_interval: 1s
    lambda: |-
      int seconds = id(homeassistant_time).now().timestamp - id(last_activation_valve_sergio);
      int days = seconds / 86400;
      int hours = (seconds % 86400) / 3600;
      int minutes = (seconds % 3600) / 60;
      int secs = seconds % 60;
      char buffer[32];
      sprintf(buffer, "%dd %dh %dm %ds", days, hours, minutes, secs);
      return std::string(buffer);

  - platform: template
    name: "Válv. Hab. Dorm. Ppal - Última activación"
    id: time_since_valve_principal
    icon: "mdi:timer-outline"
    update_interval: 1s
    lambda: |-
      int seconds = id(homeassistant_time).now().timestamp - id(last_activation_valve_principal);
      int days = seconds / 86400;
      int hours = (seconds % 86400) / 3600;
      int minutes = (seconds % 3600) / 60;
      int secs = seconds % 60;
      char buffer[32];
      sprintf(buffer, "%dd %dh %dm %ds", days, hours, minutes, secs);
      return std::string(buffer);

logger:

api:
  encryption:
    key: !secret encryption_key

ota:

web_server:
  port: 80
  version: 1

uart:
  - id: rs485
    tx_pin: GPIO27
    rx_pin: GPIO14
    baud_rate: 9600
  - id: rs232
    tx_pin: GPIO17
    rx_pin: GPIO16
    baud_rate: 9600

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23
  miso_pin: GPIO19

i2c:
  sda: GPIO4
  scl: GPIO15
  scan: true

pcf8574:
  - id: inputs
    address: 0x22
  - id: outputs
    address: 0x24

binary_sensor:
  - platform: gpio
    name: "Term. Salón"
    id: input1
    pin:
      pcf8574: inputs
      number: 0
      mode: INPUT
      inverted: true
    on_state:
      then:
        - delay: 500ms
        - if:
            condition:
              binary_sensor.is_on: input1
            then:
              - lambda: 'id(last_activation_term_salon) = id(homeassistant_time).now().timestamp;'
              - switch.turn_on: relay_1  # Válv. Salón (mantiene igual)
              - switch.turn_on: relay_2  # Válv. Cocina
              - switch.turn_on: relay_3  # Válv. Baño Peq.
            else:
              - switch.turn_off: relay_1
              - switch.turn_off: relay_2
              - switch.turn_off: relay_3

  - platform: gpio
    name: "Term. Hab. Julia"
    id: input2
    pin:
      pcf8574: inputs
      number: 1
      mode: INPUT
      inverted: true
    on_state:
      then:
        - delay: 500ms
        - if:
            condition:
              binary_sensor.is_on: input2
            then:
              - lambda: 'id(last_activation_term_julia) = id(homeassistant_time).now().timestamp;'
              - switch.turn_on: relay_6  # Cambiado a Válv. Hab. Julia
            else:
              - switch.turn_off: relay_6

  - platform: gpio
    name: "Term. Hab. Sergio"
    id: input3
    pin:
      pcf8574: inputs
      number: 2
      mode: INPUT
      inverted: true
    on_state:
      then:
        - delay: 500ms
        - if:
            condition:
              binary_sensor.is_on: input3
            then:
              - lambda: 'id(last_activation_term_sergio) = id(homeassistant_time).now().timestamp;'
              - switch.turn_on: relay_5  # Cambiado a Válv. Hab. Sergio
            else:
              - switch.turn_off: relay_5

  - platform: gpio
    name: "Term. Hab. Principal"
    id: input4
    pin:
      pcf8574: inputs
      number: 3
      mode: INPUT
      inverted: true
    on_state:
      then:
        - delay: 500ms
        - if:
            condition:
              binary_sensor.is_on: input4
            then:
              - lambda: 'id(last_activation_term_principal) = id(homeassistant_time).now().timestamp;'
              - switch.turn_on: relay_4  # Cambiado a Válv. Hab. Principal
            else:
              - switch.turn_off: relay_4

switch:
  - platform: gpio
    name: "Válv. Salón"
    id: relay_1
    pin:
      pcf8574: outputs
      number: 0
      mode: OUTPUT
      inverted: true
    on_turn_on:
      then:
        - lambda: 'id(last_activation_valve_salon) = id(homeassistant_time).now().timestamp;'

  - platform: gpio
    name: "Válv. Cocina"
    id: relay_2
    pin:
      pcf8574: outputs
      number: 1
      mode: OUTPUT
      inverted: true
    on_turn_on:
      then:
        - lambda: 'id(last_activation_valve_cocina) = id(homeassistant_time).now().timestamp;'

  - platform: gpio
    name: "Válv. Baño Peq."
    id: relay_3
    pin:
      pcf8574: outputs
      number: 2
      mode: OUTPUT
      inverted: true
    on_turn_on:
      then:
        - lambda: 'id(last_activation_valve_bano) = id(homeassistant_time).now().timestamp;'

  - platform: gpio
    name: "Válv. Hab. Julia"
    id: relay_4
    pin:
      pcf8574: outputs
      number: 3
      mode: OUTPUT
      inverted: true
    on_turn_on:
      then:
        - lambda: 'id(last_activation_valve_julia) = id(homeassistant_time).now().timestamp;'

  - platform: gpio
    name: "Válv. Hab. Sergio"
    id: relay_5
    pin:
      pcf8574: outputs
      number: 4
      mode: OUTPUT
      inverted: true
    on_turn_on:
      then:
        - lambda: 'id(last_activation_valve_sergio) = id(homeassistant_time).now().timestamp;'

  - platform: gpio
    name: "Válv. Hab. Dorm. Ppal"
    id: relay_6
    pin:
      pcf8574: outputs
      number: 5
      mode: OUTPUT
      inverted: true
    on_turn_on:
      then:
        - lambda: 'id(last_activation_valve_principal) = id(homeassistant_time).now().timestamp;'
